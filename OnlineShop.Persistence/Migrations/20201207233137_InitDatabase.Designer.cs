// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Persistence;

namespace OnlineShop.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201207233137_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCheckout")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdPayment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCheckout")
                        .IsUnique();

                    b.HasIndex("IdPayment");

                    b.HasIndex("IsActive");

                    b.ToTable("HsCheckoutPayment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCheckout")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProduct")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCheckout");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IsActive");

                    b.ToTable("HsCheckoutProductConf");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutShipment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCheckout")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdShipment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdShipment")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("HsCheckoutShipment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("MsCategory");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("MsPayment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("MsProduct");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProduct")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IsActive");

                    b.ToTable("MsProductCategory");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("MsShipment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUserProfile")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdUserProfile")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("MsUser");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.UserAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUserProfile")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdUserProfile");

                    b.HasIndex("IsActive");

                    b.ToTable("MsUserAddress");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("MsUserProfile");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Transaction.Basket", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProduct")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IsActive");

                    b.ToTable("TrBasket");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Transaction.Checkout", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCheckoutPayment")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCheckoutShipment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("TrCheckout");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutPayment", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Transaction.Checkout", "Checkout")
                        .WithOne("CheckoutPayment")
                        .HasForeignKey("OnlineShop.Persistence.Entities.History.CheckoutPayment", "IdCheckout");

                    b.HasOne("OnlineShop.Persistence.Entities.Master.Payment", "Payment")
                        .WithMany("CheckoutPayments")
                        .HasForeignKey("IdPayment");

                    b.Navigation("Checkout");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutProduct", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Transaction.Checkout", "Checkout")
                        .WithMany("CheckoutProducts")
                        .HasForeignKey("IdCheckout");

                    b.HasOne("OnlineShop.Persistence.Entities.Master.Product", "Product")
                        .WithMany("CheckoutProducts")
                        .HasForeignKey("IdProduct");

                    b.Navigation("Checkout");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.History.CheckoutShipment", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Master.Shipment", "Shipment")
                        .WithMany("CheckoutShipments")
                        .HasForeignKey("IdShipment");

                    b.HasOne("OnlineShop.Persistence.Entities.Transaction.Checkout", "Checkout")
                        .WithOne("CheckoutShipment")
                        .HasForeignKey("OnlineShop.Persistence.Entities.History.CheckoutShipment", "IdShipment");

                    b.Navigation("Checkout");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.ProductCategory", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Master.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("IdCategory");

                    b.HasOne("OnlineShop.Persistence.Entities.Master.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("IdProduct");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.User", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Master.UserProfile", "UserProfile")
                        .WithOne("User")
                        .HasForeignKey("OnlineShop.Persistence.Entities.Master.User", "IdUserProfile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.UserAddress", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Master.UserProfile", "UserProfile")
                        .WithMany("UserAddresses")
                        .HasForeignKey("IdUserProfile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Transaction.Basket", b =>
                {
                    b.HasOne("OnlineShop.Persistence.Entities.Master.Product", "Product")
                        .WithMany("Baskets")
                        .HasForeignKey("IdProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Payment", b =>
                {
                    b.Navigation("CheckoutPayments");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Product", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("CheckoutProducts");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.Shipment", b =>
                {
                    b.Navigation("CheckoutShipments");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Master.UserProfile", b =>
                {
                    b.Navigation("User");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("OnlineShop.Persistence.Entities.Transaction.Checkout", b =>
                {
                    b.Navigation("CheckoutPayment");

                    b.Navigation("CheckoutProducts");

                    b.Navigation("CheckoutShipment");
                });
#pragma warning restore 612, 618
        }
    }
}
